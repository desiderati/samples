/*
 * Copyright (c) 2025 - Felipe Desiderati
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

buildscript {
    ext {
        // Only change to Kotlin version 1.6.0 and above if the bug below has been fixed!
        // https://github.com/mapstruct/mapstruct/discussions/3030 -> FIXED! Kept for documentation purposes.
        kotlin_version = "2.0.0"

        // Do not change the versions below without absolute certainty!!!
        apollo_version = "4.1.1"
        graphql_java_version = "21.0"
        kassava_version = "2.1.0"
        mapstruct_version = "1.5.5.Final"
        springbloom_version = "4.0.0.RC8"
        spring_boot_version = "3.3.1"

        // Defines the suffix for the Spring Boot executable JAR.
        exec_jar_classifier = "exec"
    }
}

plugins {
    // Synchronizes Gradle configurations with IntelliJ.
    // Ref.: https://docs.gradle.org/current/userguide/idea_plugin.html
    id "idea"

    id "java"
    id "maven-publish"

    // Adds support for Kotlin.
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"

    // Used by MapStruct and/or code generation tools such as Dagger, Room, etc.
    id "org.jetbrains.kotlin.kapt" version "$kotlin_version"

    // Ensures that all classes marked with Spring annotations will be open by default.
    // Ref.: https://kotlinlang.org/docs/all-open-plugin.html#spring-support
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlin_version"

    id "org.jmailen.kotlinter" version "5.0.1"
    id "org.springframework.boot" version "$spring_boot_version"
    id "io.spring.dependency-management" version "1.1.7"

    // TODO Felipe Desiderati: Uncomment when using SonarQube.
    // id "org.sonarqube" version "6.0.1.5171"

    // The Apollo Gradle Plugin is used here, only to generate the `schema.json` file,
    // which will be used by the Frontend client.
    id "com.apollographql.apollo" version "$apollo_version"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url = uri("https://repo.spring.io/milestone") }

    maven {
        url = uri("https://maven.pkg.github.com/desiderati/springbloom")
        credentials {
            username = "$github_user"
            password = "$github_token"
        }
    }

    maven {
        url = uri("https://nexus-p2f.pitang.com/repository/maven-public/")
        credentials {
            username = "$nexus_user"
            password = "$nexus_password"
        }
    }
}

group = "br.tech.desiderati.sample.graphql"
version = "0.0.1-SNAPSHOT"

idea {
    project {
        languageLevel = JavaVersion.VERSION_21
    }
}

java {
    withSourcesJar()
}

apollo {
    service("SampleGraphQL") {
        packageName.set("br.tech.desiderati.sample.graphql")
        srcDir("src/main/resources/graphql")

        // TODO Felipe Desiderati: Access to files inside JARs should work.
        //includes.add("classpath*:*.graphqls")
        //includes.add("classpath*:graphql/*.graphqls")
        //includes.add("classpath*:graphql/**/*.graphqls")
    }

    // Instruct the compiler to generate Kotlin models.
    generateKotlinModels.set(true)
}

kapt {
    // By default, kapt runs all annotation processors and disables annotation processing by javac.
    // However, you may need some of javac's annotation processors working (for example, Lombok).
    keepJavacAnnotationProcessors = true
}

kotlinter {
    reporters = ["checkstyle", "plain"]
}

tasks.formatKotlinMain {
    // Ensures that Lint will not validate the folder with generated files.
    exclude { it.file.path.contains("generated/") }
}

tasks.lintKotlinMain {
    // Ensures that Lint will not validate the folder with generated files.
    exclude { it.file.path.contains("generated/") }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

compileKotlin {
    compilerOptions {
        // Adds support to @JvmDefault.
        freeCompilerArgs.add("-Xjvm-default=all")
    }
}


jar {
    // To prevent generating a JAR containing ONLY the classes of this library.
    enabled = false

    // Do not use the "-plain.jar" classifier.
    archiveClassifier = ""
}

bootJar {
    // We need to generate the executable JAR with the classifier "-exec.jar".
    archiveClassifier = exec_jar_classifier
}

bootRun {
    jvmArgs("--add-opens", "java.base/java.lang=ALL-UNNAMED")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

generateMetadataFileForMavenJavaPublication.dependsOn check
generatePomFileForMavenJavaPublication.dependsOn check

dependencies {
    //                       __      ___   ___ _  _ ___ _  _  ___                         //
    //                       \ \    / /_\ | _ \ \| |_ _| \| |/ __|                        //
    //                        \ \/\/ / _ \|   / .` || || .` | (_ |                        //
    //                         \_/\_/_/ \_\_|_\_|\_|___|_|\_|\___|                        //
    //                                                                                    //
    // Before adding new dependencies, check if it is not already available               //
    // in the project's dependency tree.                                                  //
    // If it is necessary to add, validate that it does not insert other dependencies     //
    // transitively that may be incompatible with current versions.                       //

    // spring-boot-configuration-processor is an annotation processor that generates metadata
    // about classes in your application that are annotated with @ConfigurationProperties.
    // This metadata is used by your IDE (Eclipse, IntelliJ, or NetBeans) to provide auto-completion
    // and documentation for the properties when editing application.properties and application.yaml files.
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    kapt "org.mapstruct:mapstruct-processor:$mapstruct_version"

    // Since Lombok (after numerous configuration attempts) did not work, we chose to use this approach.
    // Ref.: https://github.com/consoleau/kassava
    implementation "au.com.console:kassava:$kassava_version"

    // Spring Boot dependencies for correct application initialization.
    runtimeOnly "org.springframework.boot:spring-boot-devtools"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    //implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.boot:spring-boot-starter-webflux"

    // We need to force the GraphQL Java version, otherwise it will use a newer version
    // than the one defined by Spring.
    implementation "com.graphql-java:graphql-java:$graphql_java_version"

    // These libraries will insert all other dependencies necessary for application execution.
    implementation "dev.springbloom:springbloom-web-security:$springbloom_version"
    kapt "dev.springbloom:springbloom-web-security:$springbloom_version"
}
